// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/danmakucache/danmaku-cache.proto

package danmakucache

import (
	fmt "fmt"
	_ "github.com/bit-danmaku/danmaku/proto/common"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DanmakuCache service

func NewDanmakuCacheEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DanmakuCache service

type DanmakuCacheService interface {
	PostDanmaku(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error)
	GetDanmakuListByChannel(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error)
}

type danmakuCacheService struct {
	c    client.Client
	name string
}

func NewDanmakuCacheService(name string, c client.Client) DanmakuCacheService {
	return &danmakuCacheService{
		c:    c,
		name: name,
	}
}

func (c *danmakuCacheService) PostDanmaku(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error) {
	req := c.c.NewRequest(c.name, "DanmakuCache.PostDanmaku", in)
	out := new(PostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *danmakuCacheService) GetDanmakuListByChannel(ctx context.Context, in *GetRequest, opts ...client.CallOption) (*GetResponse, error) {
	req := c.c.NewRequest(c.name, "DanmakuCache.GetDanmakuListByChannel", in)
	out := new(GetResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DanmakuCache service

type DanmakuCacheHandler interface {
	PostDanmaku(context.Context, *PostRequest, *PostResponse) error
	GetDanmakuListByChannel(context.Context, *GetRequest, *GetResponse) error
}

func RegisterDanmakuCacheHandler(s server.Server, hdlr DanmakuCacheHandler, opts ...server.HandlerOption) error {
	type danmakuCache interface {
		PostDanmaku(ctx context.Context, in *PostRequest, out *PostResponse) error
		GetDanmakuListByChannel(ctx context.Context, in *GetRequest, out *GetResponse) error
	}
	type DanmakuCache struct {
		danmakuCache
	}
	h := &danmakuCacheHandler{hdlr}
	return s.Handle(s.NewHandler(&DanmakuCache{h}, opts...))
}

type danmakuCacheHandler struct {
	DanmakuCacheHandler
}

func (h *danmakuCacheHandler) PostDanmaku(ctx context.Context, in *PostRequest, out *PostResponse) error {
	return h.DanmakuCacheHandler.PostDanmaku(ctx, in, out)
}

func (h *danmakuCacheHandler) GetDanmakuListByChannel(ctx context.Context, in *GetRequest, out *GetResponse) error {
	return h.DanmakuCacheHandler.GetDanmakuListByChannel(ctx, in, out)
}
