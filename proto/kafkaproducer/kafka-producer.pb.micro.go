// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/kafkaproducer/kafka-producer.proto

package kafkaproducer

import (
	fmt "fmt"
	_ "github.com/bit-danmaku/danmaku/proto/common"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for KafkaProducer service

func NewKafkaProducerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for KafkaProducer service

type KafkaProducerService interface {
	PostKafka(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error)
}

type kafkaProducerService struct {
	c    client.Client
	name string
}

func NewKafkaProducerService(name string, c client.Client) KafkaProducerService {
	return &kafkaProducerService{
		c:    c,
		name: name,
	}
}

func (c *kafkaProducerService) PostKafka(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error) {
	req := c.c.NewRequest(c.name, "KafkaProducer.PostKafka", in)
	out := new(PostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KafkaProducer service

type KafkaProducerHandler interface {
	PostKafka(context.Context, *PostRequest, *PostResponse) error
}

func RegisterKafkaProducerHandler(s server.Server, hdlr KafkaProducerHandler, opts ...server.HandlerOption) error {
	type kafkaProducer interface {
		PostKafka(ctx context.Context, in *PostRequest, out *PostResponse) error
	}
	type KafkaProducer struct {
		kafkaProducer
	}
	h := &kafkaProducerHandler{hdlr}
	return s.Handle(s.NewHandler(&KafkaProducer{h}, opts...))
}

type kafkaProducerHandler struct {
	KafkaProducerHandler
}

func (h *kafkaProducerHandler) PostKafka(ctx context.Context, in *PostRequest, out *PostResponse) error {
	return h.KafkaProducerHandler.PostKafka(ctx, in, out)
}
