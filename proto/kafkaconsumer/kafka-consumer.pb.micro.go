// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: kafka-consumer.proto

package kafkaconsumer

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for KafkaConsumer service

func NewKafkaConsumerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for KafkaConsumer service

type KafkaConsumerService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (KafkaConsumer_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (KafkaConsumer_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (KafkaConsumer_BidiStreamService, error)
}

type kafkaConsumerService struct {
	c    client.Client
	name string
}

func NewKafkaConsumerService(name string, c client.Client) KafkaConsumerService {
	return &kafkaConsumerService{
		c:    c,
		name: name,
	}
}

func (c *kafkaConsumerService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "KafkaConsumer.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaConsumerService) ClientStream(ctx context.Context, opts ...client.CallOption) (KafkaConsumer_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "KafkaConsumer.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &kafkaConsumerServiceClientStream{stream}, nil
}

type KafkaConsumer_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type kafkaConsumerServiceClientStream struct {
	stream client.Stream
}

func (x *kafkaConsumerServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *kafkaConsumerServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *kafkaConsumerServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *kafkaConsumerServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *kafkaConsumerServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *kafkaConsumerService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (KafkaConsumer_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "KafkaConsumer.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &kafkaConsumerServiceServerStream{stream}, nil
}

type KafkaConsumer_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type kafkaConsumerServiceServerStream struct {
	stream client.Stream
}

func (x *kafkaConsumerServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *kafkaConsumerServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *kafkaConsumerServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *kafkaConsumerServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *kafkaConsumerServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kafkaConsumerService) BidiStream(ctx context.Context, opts ...client.CallOption) (KafkaConsumer_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "KafkaConsumer.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &kafkaConsumerServiceBidiStream{stream}, nil
}

type KafkaConsumer_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type kafkaConsumerServiceBidiStream struct {
	stream client.Stream
}

func (x *kafkaConsumerServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *kafkaConsumerServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *kafkaConsumerServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *kafkaConsumerServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *kafkaConsumerServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *kafkaConsumerServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KafkaConsumer service

type KafkaConsumerHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, KafkaConsumer_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, KafkaConsumer_ServerStreamStream) error
	BidiStream(context.Context, KafkaConsumer_BidiStreamStream) error
}

func RegisterKafkaConsumerHandler(s server.Server, hdlr KafkaConsumerHandler, opts ...server.HandlerOption) error {
	type kafkaConsumer interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type KafkaConsumer struct {
		kafkaConsumer
	}
	h := &kafkaConsumerHandler{hdlr}
	return s.Handle(s.NewHandler(&KafkaConsumer{h}, opts...))
}

type kafkaConsumerHandler struct {
	KafkaConsumerHandler
}

func (h *kafkaConsumerHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.KafkaConsumerHandler.Call(ctx, in, out)
}

func (h *kafkaConsumerHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.KafkaConsumerHandler.ClientStream(ctx, &kafkaConsumerClientStreamStream{stream})
}

type KafkaConsumer_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type kafkaConsumerClientStreamStream struct {
	stream server.Stream
}

func (x *kafkaConsumerClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *kafkaConsumerClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *kafkaConsumerClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *kafkaConsumerClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *kafkaConsumerClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *kafkaConsumerHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.KafkaConsumerHandler.ServerStream(ctx, m, &kafkaConsumerServerStreamStream{stream})
}

type KafkaConsumer_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type kafkaConsumerServerStreamStream struct {
	stream server.Stream
}

func (x *kafkaConsumerServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *kafkaConsumerServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *kafkaConsumerServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *kafkaConsumerServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *kafkaConsumerServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *kafkaConsumerHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.KafkaConsumerHandler.BidiStream(ctx, &kafkaConsumerBidiStreamStream{stream})
}

type KafkaConsumer_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type kafkaConsumerBidiStreamStream struct {
	stream server.Stream
}

func (x *kafkaConsumerBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *kafkaConsumerBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *kafkaConsumerBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *kafkaConsumerBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *kafkaConsumerBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *kafkaConsumerBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
