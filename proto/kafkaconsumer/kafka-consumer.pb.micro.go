// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: kafkaconsumer/kafka-consumer.proto

package kafkaconsumer

import (
	fmt "fmt"
	_ "github.com/bit-danmaku/danmaku/proto/common"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for KafkaConsumer service

func NewKafkaConsumerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for KafkaConsumer service

type KafkaConsumerService interface {
	PostDanmaku(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error)
}

type kafkaConsumerService struct {
	c    client.Client
	name string
}

func NewKafkaConsumerService(name string, c client.Client) KafkaConsumerService {
	return &kafkaConsumerService{
		c:    c,
		name: name,
	}
}

func (c *kafkaConsumerService) PostDanmaku(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error) {
	req := c.c.NewRequest(c.name, "KafkaConsumer.PostDanmaku", in)
	out := new(PostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KafkaConsumer service

type KafkaConsumerHandler interface {
	PostDanmaku(context.Context, *PostRequest, *PostResponse) error
}

func RegisterKafkaConsumerHandler(s server.Server, hdlr KafkaConsumerHandler, opts ...server.HandlerOption) error {
	type kafkaConsumer interface {
		PostDanmaku(ctx context.Context, in *PostRequest, out *PostResponse) error
	}
	type KafkaConsumer struct {
		kafkaConsumer
	}
	h := &kafkaConsumerHandler{hdlr}
	return s.Handle(s.NewHandler(&KafkaConsumer{h}, opts...))
}

type kafkaConsumerHandler struct {
	KafkaConsumerHandler
}

func (h *kafkaConsumerHandler) PostDanmaku(ctx context.Context, in *PostRequest, out *PostResponse) error {
	return h.KafkaConsumerHandler.PostDanmaku(ctx, in, out)
}
